package analizador;
import java_cup.runtime.*;
import java.util.ArrayList;
import structuras.tablaJson;

import structuras.arbol;

parser code
{:

        ArrayList<arbol> arbolesER = new ArrayList();

        public ArrayList getArboles(){
                return arbolesER;
        }

:}

//Terminales

terminal String PAR_IZQ, PAR_DER,MAS,POR,FLECHA,LLAVE_IZQ,LLAVE_DER;
terminal String DOSPUNTOS,INT,PUNTO,CONJ,RSALTOLINEA;
terminal String COMA;
terminal String RCOMILLAD,RCOMILLAS;
terminal String ID,CULEBRA,STRING,CARACTER;
terminal String BARRA_V;
terminal String PUNTOCOMA;



//no terminales
non terminal main;

non terminal String sentencias;
non terminal String sentencia;
non terminal String conjunto;
non terminal String expRel;

non terminal String expCon;
non terminal String expCon1;

non terminal arbol op;
non terminal arbol op1;
non terminal arbol op2;
non terminal arbol op3;
non terminal arbol op4;
non terminal arbol e;

non terminal String valor;
non terminal String valor1;


//precendencia

//precedence left else,elseif



//producciones

start with main;

main::= LLAVE_IZQ sentencias LLAVE_DER;

sentencias::= sentencias sentencia 
        | sentencia
;

sentencia::= conjunto
        | expRel
;

conjunto ::= CONJ DOSPUNTOS ID FLECHA expCon PUNTOCOMA;

expRel::= ID FLECHA e:a1 PUNTOCOMA {: arbolesER.add(a1); :}
; 



expCon::= ID    
        |CARACTER
        |STRING
        |expCon expCon1
;

expCon1::= CULEBRA CARACTER
        |CULEBRA ID
        |CULEBRA STRING
        |COMA CARACTER
        |COMA ID
        |COMA STRING
    
        
;



e    ::= valor:v1 {: RESULT=new arbol(v1); :}
        |op:a1 {: RESULT=a1; :}
;

valor::= PAR_IZQ valor1:v1 PAR_DER {: RESULT=v1; :}
        | valor1:v1 {: RESULT=v1; :}
;

valor1 ::= ID:id {: RESULT=id; :}
        |CARACTER:caracter {: RESULT=caracter; :}
        |STRING:cadena {: RESULT = cadena; :}
      
;

op   ::= BARRA_V:op e:v1 e:v2 {: arbol operacion = new arbol(op);
                                operacion.añadirHijo(v1);
                                operacion.añadirHijo(v2);
                                RESULT = operacion; :} 
        | op1:a1 {: RESULT= a1; :}
; 

op1  ::= PUNTO:op e:v1 e:v2 {: arbol operacion = new arbol(op);
                                operacion.añadirHijo(v1);
                                operacion.añadirHijo(v2);
                                RESULT = operacion; :}
        |op2:a1 {: RESULT= a1; :}
;

op2  ::= INT:op e:v1 {: arbol operacion = new arbol(op);
                                operacion.añadirHijo(v1);
                                
                                RESULT = operacion; :}
        |op3:a1 {: RESULT= a1; :}
;

op3  ::= MAS:op e:v1 {: arbol operacion = new arbol(op);
                                operacion.añadirHijo(v1);
                                
                                RESULT = operacion; :}
        |op4:a1 {: RESULT= a1; :}
;

op4 ::= POR:op e:v1 {: arbol operacion = new arbol(op);
                                operacion.añadirHijo(v1);
                                
                                RESULT = operacion; :}
;









































